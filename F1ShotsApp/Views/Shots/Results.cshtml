@using DatabaseSetupLocal.Repository
@using DatabaseSetupLocal.Library
@using Microsoft.AspNet.Identity
@model List<UserShots>
@inject ShotsRepository ShotsRepository

@{
    ViewBag.Title = "Results";
    Layout = "_Layout";
    var userId = IdentityExtensions.GetUserId(User.Identity);
}
<!-- CSS Stylesheets -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ag-grid/23.2.1/styles/ag-grid.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ag-grid/23.2.1/styles/ag-theme-alpine.css">

<script src="https://cdn.jsdelivr.net/npm/ag-grid-community@23.2.1/dist/ag-grid-community.min.js"></script>

<div class="center">
    <h2>Results</h2>
    <label class="switch">
        <input type="checkbox" id="toggleButton" onclick="toggleView()">
        <span class="slider"></span>
    </label>
    <div id="chartView">
        <div class="tab">
            @foreach (var year in ShotsRepository.GetYears())
            {
                <button class="tablinksChart" onclick="openYearChart(event, '@year')">@year</button>
            }
        </div>
        @foreach (var year in ShotsRepository.GetYears())
        {
            <div id="@year" class="tabcontentChart">
                @if (year == 2022)
                {
                    <canvas id="myChart2022"></canvas>
                }
                @if (year == 2023)
                {
                    <canvas id="myChart2023"></canvas>
                }
            </div>
        }
    </div>
    <div id="tableView" style="display: none;">
        @* <div class="tab"> *@
        @*     @foreach (var year in ShotsRepository.GetYears()) *@
        @*     { *@
        @*         <button class="tablinksTable" onclick="openYearTable(event, '@year')">@year</button> *@
        @*     } *@
        @* </div> *@
        @foreach (var year in ShotsRepository.GetYears())
        {
            <div id="@year" class="tabcontentTable">
                @if (year == 2022)
                {
                    <h4>2022</h4>
                    <div id="myGrid2022" class="ag-theme-alpine" style="width: 100%;"></div>
                }
                @if (year == 2023)
                {
                    <h4>2023</h4>

                    <div id="myGrid2023" class="ag-theme-alpine" style="width: 100%;"></div>
                }
            </div>
        }
    </div>
</div>

<script>
var gridOptions2022, gridOptions2023;
function initializeGrid2022() {
   var rowData = [
                           @foreach (var user in Model)
                           {
                               if (user.Hidden || user.Banned)
                               {
                                   continue;
                               }
                               @Html.Raw("{ userName: '" + user.UserName + "',")
                               
                               @* @Html.Raw("locations: [" + string.Join(", ", user.Race.Where(x => x.RaceYear == 2023).Select(x => "'" + x.RaceLocation + "'")) + "],"); *@
                               @Html.Raw("locations: [" + string.Join(", ", AppSetup.CalculateCumulativeSum(user.Race.Where(x => x.RaceYear == 2022).Select(x => x.Points))) + "] },")
                               
                           }
                       ];
               
                       var columnDefs = [
                           { headerName: 'User', field: 'userName'},
                             @foreach (var location in Model.First().Race.Where(z => z.RaceYear == 2022).Select(x => x.RaceLocation.Replace("Grand Prix", string.Empty)))
                             {
                                 <text>{ headerName: '@location', width: 100,  field: 'locations', valueGetter: function(params) { return params.data.locations[@(Model.First().Race.Where(z => z.RaceYear == 2022).Select(x => x.RaceLocation.Replace("Grand Prix", string.Empty)).ToList().IndexOf(location))]; } },</text>
                             }
                       ];
               
                       gridOptions2022 = {
                           columnDefs: columnDefs,
                           rowData: rowData,
                           defaultColDef: {
                               sortable: true,
                               resizable: true
                           },
                           domLayout: 'autoHeight'
                       };
               
                       var gridDiv = document.querySelector('#myGrid2022');
                       new agGrid.Grid(gridDiv, gridOptions2022);
}

        function initializeGrid2023() {
            var rowData = [
                                        @foreach (var user in Model)
                                        {
                                            if (user.Hidden || user.Banned)
                                            {
                                                continue;
                                            }
                                            @Html.Raw("{ userName: '" + user.UserName + "',")
                                            
                                            @* @Html.Raw("locations: [" + string.Join(", ", user.Race.Where(x => x.RaceYear == 2023).Select(x => "'" + x.RaceLocation + "'")) + "],"); *@
                                            @Html.Raw("locations: [" + string.Join(", ", AppSetup.CalculateCumulativeSum(user.Race.Where(x => x.RaceYear == 2023).Select(x => x.Points))) + "] },")
                                            
                                        }
                                    ];
        
            var columnDefs = [
                                        { headerName: 'User', field: 'userName'},
                                          @foreach (var location in Model.First().Race.Where(z => z.RaceYear == 2023).Select(x => x.RaceLocation.Replace("Grand Prix", string.Empty)))
                                          {
                                              <text>{ headerName: '@location', width: 100,  field: 'locations', valueGetter: function(params) { return params.data.locations[@(Model.First().Race.Where(z => z.RaceYear == 2023).Select(x => x.RaceLocation.Replace("Grand Prix", string.Empty)).ToList().IndexOf(location))]; } },</text>
                                          }
                                    ];
                            
                                    gridOptions2023 = {
                                        columnDefs: columnDefs,
                                        rowData: rowData,
                                        defaultColDef: {
                                            sortable: true,
                                            resizable: true
                                        },
                                        domLayout: 'autoHeight'
                                    };
                            
                                    var gridDiv = document.querySelector('#myGrid2023');
                                    new agGrid.Grid(gridDiv, gridOptions2023);
        }

    function toggleView() {
        var chartView = document.getElementById("chartView");
        var tableView = document.getElementById("tableView");
        var toggleButton = document.getElementById("toggleButton");

        if (chartView.style.display === "none") {
            chartView.style.display = "block";
            tableView.style.display = "none";
            toggleButton.textContent = "Table view";
        } else {
            chartView.style.display = "none";
            tableView.style.display = "block";
            toggleButton.textContent = "Chart View";
        }
    }
    initializeGrid2022();
    initializeGrid2023();
    function openYearChart(evt, yearChart) {
        var i, tabcontentChart, tablinksChart;
        tabcontentChart = document.getElementsByClassName("tabcontentChart");
        for (i = 0; i < tabcontentChart.length; i++) {
            tabcontentChart[i].style.display = "none";
        }
        tablinksChart = document.getElementsByClassName("tablinksChart");
        for (i = 0; i < tablinksChart.length; i++) {
            tablinksChart[i].className = tablinksChart[i].className.replace(" active", "");
        }
        document.getElementById(yearChart).style.display = "block";
        evt.currentTarget.className += " active";
    }
    
    function openYearTable(evt, yearTable) {
        
        var i, tabcontentTable, tablinksTable;
                tabcontentTable = document.getElementsByClassName("tabcontentTable");
                for (i = 0; i < tabcontentTable.length; i++) {
                    tabcontentTable[i].style.display = "none";
                }
                tablinksTable = document.getElementsByClassName("tablinksTable");
                for (i = 0; i < tablinksTable.length; i++) {
                    tablinksTable[i].className = tablinksTable[i].className.replace(" active", "");
                }
                document.getElementById(yearTable).style.display = "block";
                evt.currentTarget.className += " active";
    
        // Call the appropriate grid initialization function
if (yearTable === "2022") {
    initializeGrid2022();
} else if (yearTable === "2023") {
    initializeGrid2023();
}
    }

</script>
<!-- JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/ag-grid-community@23.2.1/dist/ag-grid-community.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    var ctx = document.getElementById('myChart2022').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.First().Race.Where(x => x.RaceYear == 2022).Select(x => x.RaceLocation).ToArray())),
            datasets: [
                @foreach (var user in Model)
                {
                    if (user.Hidden || user.Banned)
                    {
                        continue;
                    }
                    <text>
                    {
                        label: '@user.UserName',
                        data: @Html.Raw(Json.Serialize(AppSetup.CalculateCumulativeSum(user.Race.Where(x => x.RaceYear == 2022).ToArray().Select(x => x.Points).ToList()))),
                        fill: false,
                        @{
                            var rnd = new Random();
                        }
                        borderColor: 'rgb(@rnd.Next(256), @rnd.Next(256), @rnd.Next(256))',
                        backgroundColor: 'rgb(@rnd.Next(256), @rnd.Next(256), @rnd.Next(256))',
                        tension: 0.1
                    },
                    </text>
                }
            ]
        },
        options: {}
    });

    var ctx2 = document.getElementById('myChart2023').getContext('2d');
    var myChart2 = new Chart(ctx2, {
        type: 'line',
        data: {
            labels: @Html.Raw(Json.Serialize(Model.First().Race.Where(x => x.RaceYear == 2023).Select(x => x.RaceLocation).ToArray())),
            datasets: [
                @foreach (var user in Model)
                {
                    if (user.Hidden || user.Banned)
                    {
                        continue;
                    }
                    <text>
                    {
                        label: '@user.UserName',
                        data: @Html.Raw(Json.Serialize(AppSetup.CalculateCumulativeSum(user.Race.Where(x => x.RaceYear == 2023).ToArray().Select(x => x.Points).ToList()))),
                        fill: false,
                        @{
                            var rnd = new Random();
                        }
                        borderColor: 'rgb(@rnd.Next(256), @rnd.Next(256), @rnd.Next(256))',
                        backgroundColor: 'rgb(@rnd.Next(256), @rnd.Next(256), @rnd.Next(256))',
                        tension: 0.1
                    },
                    </text>
                }
            ]
        },
        options: {}
    });

    function getRandomColor() {
        var rnd = Math.floor(Math.random() * 256);
        return 'rgb(' + rnd + ', ' + rnd + ', ' + rnd + ')';
    }
</script>
<script src="https://unpkg.com/ag-grid-community/dist/ag-grid-community.min.js"></script>
<style>
    .center {
        text-align: center;
        margin-bottom: 20px;
    }

    .tab {
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: #f1f1f1;
    }

    .tab button {
        background-color: inherit;
        float: none;
        border: none;
        outline: none;
        cursor: pointer;
        padding: 10px 12px;
        transition: 0.3s;
        font-size: 16px;
        display: block;
        width: 100%;
        text-align: center;
    }

    .tab button:hover {
        background-color: #ddd;
    }

    .tab button.active {
        background-color: #ccc;
    }



    canvas {
        max-width: 100%;
        height: auto;
    }
    /* Switch container */
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
    
        /* Slider */
        .slider {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            border-radius: 34px;
            transition: .4s;
        }
    
        /* Slider round */
        .slider::before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            border-radius: 50%;
            transition: .4s;
        }
    
        /* Toggle the switch when clicked */
        input[type="checkbox"]:checked + .slider {
            background-color: #2196F3;
        }
    
        input[type="checkbox"]:checked + .slider::before {
            transform: translateX(26px);
        }
    
        /* Hide the checkbox input */
        input[type="checkbox"] {
            display: none;
        }
</style>