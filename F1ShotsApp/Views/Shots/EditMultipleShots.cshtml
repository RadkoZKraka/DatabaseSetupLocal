@using Microsoft.AspNet.Identity
@model Race

@{
    ViewBag.Title = "title";
    Layout = "_Layout";
    var userId = IdentityExtensions.GetUserId(User.Identity);

    var selectedDrivers = Model.Shot.Select(x => x.UsersShotDriver).ToList();
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

@{
    var raceDate = (ViewBag.RaceSchedule as RaceSchedule).F1Events
        .First(x => x.EventName == "Qualifying")
        .EventDateAndTime
        .ToUniversalTime()
        .ToString("s") + "Z";

    var raceDateToShow = (ViewBag.RaceSchedule as RaceSchedule)
        .F1Events
        .First(x => x.EventName == "Qualifying")
        .EventDateAndTime
        .ToString("f");
}

<style>
    .container {
            display: flex;
            justify-content: space-between;
        }
    
        .form-container {
            width: 60%;
        }
    
        .available-drivers-container {
            width: 30%;
        }
    
        .available-drivers {
            list-style: none;
            padding: 0;
            margin: 0;
        }
</style>

<div style="margin-left: 20%">
    <h2>Editing:</h2>
    <h2>@ViewBag.User.UserName - @ViewBag.Year - @ViewBag.Location</h2>
    <h2>@raceDateToShow</h2>
    <h2 style="font-weight: bold" id="countdown"></h2>
    <br/>
    <div id="unsaved-message" style="display: none;">You have unsaved changes.</div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="container row">
            <div class="form-container col">
                <div class="form-horizontal">
                    @Html.ValidationSummary(true)
                    @Html.HiddenFor(model => model.Id)
                    <table>
                        <tr>
                            <th>
                                <h5>Position:</h5>
                            </th>
                            <th>
                                <h5>Users driver:</h5>
                            </th>
                            <th>
                                <h5>Users driver:</h5>
                            </th>
                        </tr>
                        <br/>

                        @for (var i = 1; i - 1 < Model.Shot.Count; i++)
                        {
                            <tr style="height: 40px">
                                <td>
                                    @i
                                </td>
                                <td>
                                    @Html.DropDownListFor(
                                        model => model.Shot[i - 1].UsersShotDriver,
                                        new SelectList(ViewBag.F1Grid),
                                        "Select a driver.",
                                        new {@class = "form-control driver-dropdown"}
                                        )
                                    @Html.ValidationMessageFor(model => model.Shot[i - 1].UsersShotDriver)
                                </td>
                            </tr>
                        }
                        <tr style="height: 40px">
                            <td>
                                Pole position
                            </td>
                            <td>
                                @Html.DropDownListFor(
                                    model => model.PolePosition,
                                    new SelectList(ViewBag.F1Grid),
                                    "Select a driver.",
                                    new {@id = "ddlId", @class = "form-control"}
                                    )
                                @Html.ValidationMessageFor(model => model.PolePosition)
                            </td>
                        </tr>
                        <tr style="height: 40px">
                            <td>
                                Fastest lap
                            </td>
                            <td>
                                @Html.DropDownListFor(
                                    model => model.FastestLap,
                                    new SelectList(ViewBag.F1Grid),
                                    "Select a driver.",
                                    new {@id = "ddlId", @class = "form-control"}
                                    )
                                @Html.ValidationMessageFor(model => model.FastestLap)
                            </td>
                        </tr>

                    </table>


                </div>
               
                
            </div>
            <div class="available-drivers-container col" style="display: flex; justify-content: space-between;">
                <div style="width: 30%">
                    <h4>Available Drivers:</h4>
                    <ul class="available-drivers"></ul>
                </div>
            </div>
            
        </div>
        <div class="form-group">
            <div>
                <input type="submit" value="Save" class="btn btn-primary" style="margin-top: 20px; width: 50%; margin-left: 15%"/>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink(
            "Back to List",
            "Shots",
            new {userId = ViewBag.User.Id, raceId = ViewBag.RaceId, raceLocation = ViewBag.Location},
            new {@class = "btn btn-primary", style = "margin-top: 10px; margin-left: 37%"}
            )
    </div>
</div>
<script>
    var isFormDirty = false;
    
    $('form').submit(function () {
        var selectedDrivers = $('.driver-dropdown').map(function () {
            return $(this).val();
        }).get();
    
        var uniqueDrivers = [...new Set(selectedDrivers)]; // Remove duplicates
    
        if (selectedDrivers.length !== uniqueDrivers.length) {
            var duplicateDrivers = getDuplicateDrivers(selectedDrivers);
            var message = "The following drivers have been selected more than once:\n\n";
            message += duplicateDrivers.join("\n");
            alert(message);
            return false; // Prevent form submission
        }
    });
    function getDuplicateDrivers(drivers) {
        var driverCounts = {};
        var duplicateDrivers = [];
    
        for (var i = 0; i < drivers.length; i++) {
            var driver = drivers[i];
            if (driverCounts[driver]) {
                duplicateDrivers.push(driver);
            } else {
                driverCounts[driver] = 1;
            }
        }
    
        return duplicateDrivers;
    }
    function updateAvailableDrivers() {
            var selectedDrivers = $('.driver-dropdown').map(function () {
                return $(this).val();
            }).get();
    
            var availableDrivers = $('.driver-dropdown option').filter(function () {
                return selectedDrivers.indexOf($(this).val()) === -1;
            }).map(function () {
                return $(this).text();
            }).get();
    
            // Remove duplicates from the available drivers list
            var uniqueAvailableDrivers = [...new Set(availableDrivers)];
    
            var availableDriversHtml = uniqueAvailableDrivers.map(function (driver) {
                return '<li>' + driver + '</li>';
            }).join('');
    
            $('.available-drivers').html(availableDriversHtml);
        }

    $(document).ready(function () {
        $('form :input').change(function () {
            isFormDirty = true;
            $('#unsaved-message').show();
        });

        $('form').submit(function () {
            isFormDirty = false;
            $('#unsaved-message').hide();
        });

        window.onbeforeunload = function () {
            if (isFormDirty) {
                return "You have unsaved changes. Are you sure you want to leave this page?";
            }
        };
        updateAvailableDrivers();
                $('.driver-dropdown').change(updateAvailableDrivers);
    });

    var date = "@raceDate";
    var targetDate = new Date(Date.parse(date));

    var timerElement = document.getElementById("countdown");

    setInterval(function() {
        var currentDate = new Date();
        var timeRemaining = targetDate - currentDate;

        var days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));
        var hours = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        var minutes = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60));
        var seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);

        timerElement.innerHTML = days + " days, " + hours + " hours, " + minutes + " minutes, " + seconds + " seconds";
    }, 1000);
</script>